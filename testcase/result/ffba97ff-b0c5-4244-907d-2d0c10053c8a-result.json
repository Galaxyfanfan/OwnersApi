{"name": "test_commit_claims", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_user.TestUser object at 0x111328f70>\n\n    @allure.story('提交理赔')\n    def test_commit_claims(self):\n        list = self.user.get_claims_list()\n        if list['code'] == 200:\n            if len(list['data']) > 0:\n                flowid = list['data'][0]['flowid']\n    \n        detail = self.user.get_claims_detail(flowid)\n        if detail['code'] == 200:\n            departid = detail['data']['depart_id']\n            files = detail['data']['files']\n            if len(files) > 0:\n                id = files[0]['id']\n        params = {\n            'amount':6000,\n            'departid':departid,\n            'files':[],\n            'flowid':flowid,\n            'id':id\n        }\n>       message = self.user.commit_claims(params)\n\ntest_user.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../api_page/user_page.py:85: in commit_claims\n    return self.send_post(url=self.api_list['commit_claims'], params=params)\n../api_page/base_api.py:23: in send_post\n    return self.send_api(url=url,method='post',params=params)\n../api_page/base_api.py:61: in send_api\n    response = requests.request(**data).json()\n../venv/lib/python3.8/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x1108daeb0>\ns = '<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <meta charset=\"UTF-8\">\\r\\n    <title>System Error</title>\\r\\n    <meta nam...innerHTML;\\r\\n                }\\r\\n            });\\r\\n\\r\\n        })();\\r\\n    </script>\\r\\n    </body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "stdout", "source": "4dbc61b9-7bb4-42a3-bf01-2ae0664ebedf-attachment.txt", "type": "text/plain"}], "start": 1606291406721, "stop": 1606291406976, "uuid": "242fc11c-898f-4c67-8911-41c21482f6e8", "historyId": "f9bd02df2fc53982acda152d8dc722e3", "testCaseId": "8411e65dc7d4b61a5a1cd1db70218de9", "fullName": "test_user.TestUser#test_commit_claims", "labels": [{"name": "story", "value": "提交理赔"}, {"name": "feature", "value": "个人中心"}, {"name": "suite", "value": "test_user"}, {"name": "subSuite", "value": "TestUser"}, {"name": "host", "value": "Jammy-MacBook-Pro.local"}, {"name": "thread", "value": "92394-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_user"}]}