{
  "uid" : "2bb6d718a60712b4",
  "name" : "test_commit_claims",
  "fullName" : "test_user.TestUser#test_commit_claims",
  "historyId" : "f9bd02df2fc53982acda152d8dc722e3",
  "time" : {
    "start" : 1606292252653,
    "stop" : 1606292252932,
    "duration" : 279
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <test_user.TestUser object at 0x10cdc2fd0>\n\n    @allure.story('提交理赔')\n    def test_commit_claims(self):\n        with allure.step('理赔列表'):\n            list = self.user.get_claims_list()\n            if list['code'] == 200:\n                if len(list['data']) > 0:\n                    flowid = list['data'][0]['flowid']\n        with allure.step('理赔详情'):\n            detail = self.user.get_claims_detail(flowid)\n            if detail['code'] == 200:\n                departid = detail['data']['depart_id']\n                files = detail['data']['files']\n                if len(files) > 0:\n                    id = files[0]['id']\n        params = {\n            'amount':6000,\n            'departid':departid,\n            'files':[],\n            'flowid':flowid,\n            'id':id\n        }\n>       message = self.user.commit_claims(params)\n\ntest_user.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../api_page/user_page.py:85: in commit_claims\n    return self.send_post(url=self.api_list['commit_claims'], params=params)\n../api_page/base_api.py:23: in send_post\n    return self.send_api(url=url,method='post',params=params)\n../api_page/base_api.py:61: in send_api\n    response = requests.request(**data).json()\n../venv/lib/python3.8/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x10c44deb0>\ns = '<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <meta charset=\"UTF-8\">\\r\\n    <title>System Error</title>\\r\\n    <meta nam...innerHTML;\\r\\n                }\\r\\n            });\\r\\n\\r\\n        })();\\r\\n    </script>\\r\\n    </body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1606292251365,
      "stop" : 1606292251365,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <test_user.TestUser object at 0x10cdc2fd0>\n\n    @allure.story('提交理赔')\n    def test_commit_claims(self):\n        with allure.step('理赔列表'):\n            list = self.user.get_claims_list()\n            if list['code'] == 200:\n                if len(list['data']) > 0:\n                    flowid = list['data'][0]['flowid']\n        with allure.step('理赔详情'):\n            detail = self.user.get_claims_detail(flowid)\n            if detail['code'] == 200:\n                departid = detail['data']['depart_id']\n                files = detail['data']['files']\n                if len(files) > 0:\n                    id = files[0]['id']\n        params = {\n            'amount':6000,\n            'departid':departid,\n            'files':[],\n            'flowid':flowid,\n            'id':id\n        }\n>       message = self.user.commit_claims(params)\n\ntest_user.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../api_page/user_page.py:85: in commit_claims\n    return self.send_post(url=self.api_list['commit_claims'], params=params)\n../api_page/base_api.py:23: in send_post\n    return self.send_api(url=url,method='post',params=params)\n../api_page/base_api.py:61: in send_api\n    response = requests.request(**data).json()\n../venv/lib/python3.8/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x10c44deb0>\ns = '<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <meta charset=\"UTF-8\">\\r\\n    <title>System Error</title>\\r\\n    <meta nam...innerHTML;\\r\\n                }\\r\\n            });\\r\\n\\r\\n        })();\\r\\n    </script>\\r\\n    </body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:355: JSONDecodeError",
    "steps" : [ {
      "name" : "理赔列表",
      "time" : {
        "start" : 1606292252653,
        "stop" : 1606292252733,
        "duration" : 80
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "理赔详情",
      "time" : {
        "start" : 1606292252734,
        "stop" : 1606292252850,
        "duration" : 116
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "6b9b3fb687315042",
      "name" : "stdout",
      "source" : "6b9b3fb687315042.txt",
      "type" : "text/plain",
      "size" : 3144
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1606292252982,
      "stop" : 1606292252982,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "个人中心"
  }, {
    "name" : "story",
    "value" : "提交理赔"
  }, {
    "name" : "suite",
    "value" : "test_user"
  }, {
    "name" : "subSuite",
    "value" : "TestUser"
  }, {
    "name" : "host",
    "value" : "Jammy-MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "92972-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_user"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "86176267c7f5a6c0",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1606291894565,
        "stop" : 1606291894849,
        "duration" : 284
      }
    }, {
      "uid" : "1b0a32c6ce16f7cc",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1606291569312,
        "stop" : 1606291569586,
        "duration" : 274
      }
    }, {
      "uid" : "3e96fd754b3dde46",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1606291406721,
        "stop" : 1606291406976,
        "duration" : 255
      }
    }, {
      "uid" : "ea2f638e9ae5a566",
      "status" : "broken",
      "statusDetails" : "UnboundLocalError: local variable 'flowid' referenced before assignment",
      "time" : {
        "start" : 1606290060572,
        "stop" : 1606290060648,
        "duration" : 76
      }
    }, {
      "uid" : "91c584923d441059",
      "status" : "broken",
      "statusDetails" : "UnboundLocalError: local variable 'flowid' referenced before assignment",
      "time" : {
        "start" : 1606290022990,
        "stop" : 1606290023086,
        "duration" : 96
      }
    }, {
      "uid" : "d0d543d87104128a",
      "status" : "broken",
      "statusDetails" : "UnboundLocalError: local variable 'flowid' referenced before assignment",
      "time" : {
        "start" : 1606289481967,
        "stop" : 1606289482078,
        "duration" : 111
      }
    }, {
      "uid" : "23f7742f4e7d0172",
      "status" : "broken",
      "statusDetails" : "UnboundLocalError: local variable 'flowid' referenced before assignment",
      "time" : {
        "start" : 1606288927875,
        "stop" : 1606288927957,
        "duration" : 82
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2bb6d718a60712b4.json",
  "parameterValues" : [ ]
}